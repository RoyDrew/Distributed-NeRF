import numpy as np

def cal_err(T1, T2):
    R1 = T1[:3, :3]
    t1 = T1[:3, 3]
    R2 = T2[:3, :3]
    t2 = T2[:3, 3]
    R21 = R1.T @ R2
    t21 = R1.T @ (t1 - t2)

    offset = np.linalg.norm(t21)
    angle = np.arccos((np.trace(R21) - 1) / 2)

    return offset, angle


t1 = np.array([[0.29257137, 0.8297249, -0.475351, 0.31210223],
               [-0.9562293, 0.2511338, -0.15019082, -0.15876806],
               [-0.00524036, 0.4984861, 0.86688185, 0.00098995]])

t2 = np.array([[0.33736968, 0.80590439, -0.48651811, 0.76054907],
               [-0.94136918, 0.28749749, -0.17654827, -0.13532971],
               [-0.00240828, 0.51755518, 0.85564643, 0.00061634]])

t3 = np.array([[0.2934315, 0.829544, -0.47513652, 0.48323432],
               [-0.9559644, 0.25177047, -0.15081005, -0.0904438],
               [-0.00547822, 0.49846604, 0.8668919, 0.00103927]])

t4 = np.array([[0.33727592, 0.80569237, -0.48693398, 0.63622767],
               [-0.94140267, 0.28730831, -0.17667761, -0.1871161],
               [-0.00244762, 0.51799005, 0.85538316, 0.00033371]])

#13 - nerf1 ;14 - nerf2
# t1 = np.array([[0.29257137, 0.8297249, -0.475351, 0.31210223],
#                [-0.9562293, 0.2511338, -0.15019082, -0.15876806],
#                [-0.00524036, 0.4984861, 0.86688185, 0.00098995]])

# t2 = np.array([
#     [ 3.3728996e-01,  8.0525094e-01, -4.8765385e-01,  7.5991243e-01],
#     [-9.4139820e-01,  2.8729564e-01, -1.7672177e-01, -1.3520473e-01],
#     [-2.2045439e-03,  5.1868296e-01,  8.5496372e-81,  3.3700466e-04]
# ])

# t3 = np.array([
#     [ 0.29380706,  0.82880604, -0.47619098,  0.4817582 ],
#     [-0.9558494,   0.25192937, -0.15127265, -0.08985783],
#     [-0.00540913,  0.49961188,  0.8662324,  -0.0024569 ]
# ])

# t4 = np.array([[0.33727592, 0.80569237, -0.48693398, 0.63622767],
#                [-0.94140267, 0.28730831, -0.17667761, -0.1871161],
#                [-0.00244762, 0.51799005, 0.85538316, 0.00033371]])

#14 - nerf1 ;13 -nerf2

# t1 = np.array([
#     [ 2.9255447e-01,  8.2982111e-01, -4.7519344e-01,  3.1188279e-01],
#     [-9.5623255e-01,  2.5096753e-01, -1.5044799e-01, -1.5871441e-01],
#     [-5.5867904e-03,  4.9840966e-01,  8.6692363e-01, -5.4693222e-04]
# ])

# t2 = np.array([
#     [0.33736968, 0.80590439, -0.48651811, 0.76054907],
#     [-0.94136918, 0.28749749, -0.17654827, -0.13532971],
#     [-0.00240828, 0.51755518, 0.85564643, 0.00061634]
# ])

# t3 = np.array([
#     [0.2934315, 0.829544, -0.47513652, 0.48323432],
#     [-0.9559644, 0.25177047, -0.15081005, -0.0904438],
#     [-0.00547822, 0.49846604, 0.8668919, 0.00103927]
# ])

# t4 = np.array([
#     [ 0.33838832,  0.80541307, -0.486624,  0.6376405],
#     [-0.94100416,  0.2884803, -0.17689016, -0.18432634],
#     [-0.00208824,  0.5177728,  0.8555156,  0.00163144]
# ])

t1 = np.vstack((t1, np.array([0, 0, 0, 1])))
t2 = np.vstack((t2, np.array([0, 0, 0, 1])))
t3 = np.vstack((t3, np.array([0, 0, 0, 1])))
t4 = np.vstack((t4, np.array([0, 0, 0, 1])))
ta = t2 @ np.linalg.inv(t1)
tb = t4 @ np.linalg.inv(t3)
t21, angle21 = cal_err(  np.linalg.inv(t1) @ t2, np.linalg.inv(t3) @ t4, )
err = ta @ np.linalg.inv(tb) 
print(f"angle_error = {angle21:.2e}, t_error = {t21:.3e}")

I = np.eye(4)

# 计算差矩阵
diff_matrix = err - I

# 计算矩阵的Frobenius范数
frobenius_norm = np.linalg.norm(diff_matrix, 'fro')

# 计算矩阵的最大绝对值范数（无穷范数）
infinity_norm = np.linalg.norm(diff_matrix, np.inf)

print("T12")
print(np.linalg.inv(t1) @ t2)

print("T12'")
print(np.linalg.inv(t3) @ t4)


print("差矩阵：")
print(diff_matrix)
print("Frobenius范数:", frobenius_norm)
print("最大绝对值范数（无穷范数）:", infinity_norm)
# Print the results
print(f"angle_error = {angle21:.2e}, t_error = {t21:.3e}")


# Write the results to a file
with open("error_results.txt", "w") as fp:
    fp.write(f"angle_error = {angle21:.2e}, t_error = {t21:.3e}")

